/*
 * select root
 */
select
	= (_ select:(select_to_from/from_to_select) _) {
    	return select;
    }
    /
    ("(" select:select ")") {
    	return select;
    }

select_to_from
	= select:select_clause 
    		__ from:from_clause 
            unnests:(__ unnest_clauses)? 
            let_:(__ let_clause)?
            where:(__ where_clause)? 
    		group_by:(__ group_by_core)?
            order_by:(__ order_by_clause)?
            limit:(__ limit_clause)?
            offset:(__ offset_clause)? {
    	return {
        	type: "select_from",
            select: select,
            from: from,
            unnests: unnests ? unnests[1] : null,
            let: let_ ? let_[1] : null,
            where: where ? where[1] : null,
            group_by: group_by ? group_by[1] : null,
            order_by: order_by ? order_by[1] : null,
            limit: limit ? limit[1] : null,
            offset: offset ? offset[1] : null
        };
    }
from_to_select
	= from:from_clause 
            unnests:(__ unnest_clauses)? 
            let_:(__ let_clause)?
            where:(__ where_clause)? 
    		group_by:(__ group_by_core)?
            __ select:select_clause
            order_by:(__ order_by_clause)?
            limit:(__ limit_clause)?
            offset:(__ offset_clause)? {
    	return {
        	type: "from_select",
            select: select,
            from: from,
            unnests: unnests ? unnests[1] : null,
            let: let_ ? let_[1] : null,
            where: where ? where[1] : null,
            group_by: group_by ? group_by[1] : null,
            order_by: order_by ? order_by[1] : null,
            limit: limit ? limit[1] : null,
            offset: offset ? offset[1] : null
        };
    }

/*
 * select_clause
 */
select_clause
	= 'SELECT'i __ select_term:(select_object/select_list) {
    	return select_term;
    }
select_expr
	= array_expr
    / red
    / expr 

select_object
	= obj:select_sub_object {
    	return {
        	type: "select_object",
            obj: obj
        };
    }
select_sub_object
	= '{' _ head:select_member tail:(_ ',' _ member:select_member { return member; })* _ '}' {
    	var rv = {};
        rv[head.name] = head.value;
        tail.map(function (item) {
        	rv[item.name] = item.value;
        });
        return rv;
    }
select_member
	= name:identifier _ ':' _ value:(select_expr/select_sub_object) {
    	return {
        	name: name,
            value: value
        };
    }

select_list
	= head:select_alias tail:(_ ',' _ alias:select_alias { return alias; })* {
        return {
        	type: "select_list",
            list: [head].concat(tail)
        };
    }
select_alias
	= value:select_expr alias:(__ 'AS'i __ identifier)? {
    	return {
        	name: alias ? alias[3] : null,
            value: value
        };
    }

/*
 * from_clause
 */
from_clause 
	= 'FROM'i __ from_term:(from_alias/from_select) {
    	return from_term;
    }
from_alias
	= alias:identifier {
    	return  {
        	type: "from_alias",
            alias: alias
        };
    }
from_select
	= "(" select:select ")" {
    	return  {
        	type: "from_select",
            select: select
        };
    }

/*
 * unnest_clauses
 */
unnest_clauses
	= head:unnest_clause tail:(__ clause:unnest_clause { return clause; })* {
    	return [head].concat(tail);
    }
unnest_clause
	= 'UNNEST'i __ head:unnest_term tail:(_ "," _ term:unnest_term { return term; })* {
    	return {
        	type: "unnest_clause",
            list: [head].concat(tail)
        };
    };
unnest_term
	= expr:array_expr alias:(__ 'AS'i __ identifier)? {
    	return {
        	name: alias ? alias[3] : null,
            expr: expr
        };
    }

/*
 * let_clause
 */
let_clause
	= 'LET'i __ head:let_term tail:(_ ',' _ term:let_term { return term; })* {
    	return {
        	type: "let_clause",
            list: [head].concat(tail)
        };
    }
let_expr
	= expr
    / array_expr
let_term
	= name:identifier _ '=' _ expr:let_expr {
    	return {
        	name: name,
            expr: expr
        };
    };
    
/*
 * where_clause
 */
where_clause 
	= 'WHERE'i __ cond:cond {
    	return {
        	type: "where_clause",
            cond: cond
        };
    }

/*
 * group_by_core
 */
group_by_core 
	= group_by:group_by_clause
    		letting:(__ letting_clause)?
            having:(__ having_clause)? {
    	return {
        	group_by: group_by,
            letting: letting ? letting[1] : null,
            having: having ? having[1] : null
        };
    }

/*
 * group_by_clause
 */
group_by_clause
	= 'GROUP'i __ 'BY'i __ head:expr tail:(_ ',' _ term:expr { return term; })* {
    	return {
        	type: "group_by_clause",
            list: [head].concat(tail)
        };
    }

/*
 * letting_clause
 */
letting_clause
	= 'LETTING'i __ head:letting_term tail:(_ ',' _ term:letting_term { return term; })* {
    	return {
        	type: "letting_clause",
            list: [head].concat(tail)
        };
    }
letting_term
	= name:identifier _ '=' _ expr:select_expr {
    	return {
        	name: name,
            expr: expr
        };
    }

/*
 * having_clause
 */
having_clause
	= 'HAVING'i __ cond:cond {
    	return {
        	type: "having_clause",
            cond: cond
        };
    }

/*
 * order_by_clause
 */
order_by_clause 
	= 'ORDER'i __ 'BY'i __ head:order_by_term tail:(_ ',' _ term:order_by_term { return term; })* {
    	return {
        	type: "order_by_clause",
            list: [head].concat(tail)
        };
    }
order_by_term
	= expr:expr order:(__ order:("ASC"i/"DESC"i) { return order; })? {
    	return {
        	expr: expr,
            order: order ? order : "ASC"
        };
    }

/*
 * limit_clause
 */
limit_clause 
	= 'LIMIT'i __ value:integer {
    	return {
        	type: "limit_clause",
            value: value
        };
    };

/*
 * offset_clause
 */
offset_clause
	= 'OFFSET'i __ value:integer {
    	return {
        	type: "offset_clause",
            value: value
        };
    };

/*
 * cond
 */
cond
	= or_cond

or_cond
	= lhc:and_cond tail:(__ "OR"i __ rhc:and_cond { return rhc; })? {
    	if (!tail) {
        	return lhc;
        }
    	return {
        	type: "binary_expr",
            op: "OR",
            lhc: lhc,
            rhc: tail.rhc
        };
    }

and_cond
	= lhc:base_cond tail:(__ "AND"i __ rhc:base_cond { return rhc; })? {
    	if (!tail) {
        	return lhc;
        }
    	return {
        	type: "binary_expr",
            op: "AND",
            lhc: lhc,
            rhc: tail.rhc
        };
    }

base_cond
	= binary_expr_cond 
	/ is_null_cond 
	/ like_cond 
	/ list_cond 
	/ array_cond 
	/ not_cond 
	/ ("(" _ cond:cond _ ")") { 
          return cond;
    }

not_cond
	= "NOT"i __ cond:cond { 
          return {
            type: "not_cond",
            cond: cond
        };
    }

array_cond
	= op:("ANY"i / "ALL"i) __ array_expr:array_expr __ "SATISFIES"i __ cond:cond { 
          return {
            type: "array_cond",
            array_expr: array_expr,
            op: op.toUpperCase(),
            cond: cond
        };
    }

list_cond
	= expr:expr __ op:( "IN"i / "NIN"i ) __ "(" _ head:value tail:(_ "," _ val:value { return val; })* _ ")" { 
          return {
            type: "list_cond",
            expr: expr,
            op: op.toUpperCase(),
            values: [head].concat(tail)
        };
    }

like_cond
	= expr:expr __ "LIKE"i __ regex:string { 
        return {
            type: "like_cond",
            expr: expr,
            regex: regex
        };
    }
  
is_null_cond
	= expr:expr __ "IS"i __ "NULL"i { 
          return {
            type: "is_null_cond",
            expr: expr
        };
    }

binary_expr_cond
	= lhe:expr _ op:( "<=" / "<" / ">=" / ">" / "!=" / "=" ) _ rhe:expr { 
          return {
            type: "binary_expr_cond",
            lhe: lhe,
            op: op,
            rhe: rhe
        };
    }

/*
 * red
 */
red
  = expr_red 
  / ("(" _ red:red _ ")") {
      return red;
  }

expr_red
  = op:("SUM"i / "AVG"i / "COUNT"i / "MAX"i / "MIN"i) "(" _ expr:expr _ ")" {
      return {
          type: "expr_red",
          op: op.toUpperCase(),
          expr: expr
      };
  }

/*
 * array_expr
 */
array_expr
	= compr_array_expr
    / binary_array_expr
    / set_array_expr
    / expr
    / ("(" _ array_expr:array_expr _ ")") {
    	return array_expr;
    }

compr_array_expr
	= for_to_select_compr_array_expr
    / select_to_for_compr_array_expr

for_to_select_compr_array_expr
	= for_:for_clause
    	where:(__ where_clause)?
        __ select:select_clause {
        return {
        	type: "compr_array_expr",
            for: for_,
            where: where,
            select: select
        };
    }
select_to_for_compr_array_expr
	= select:select_clause
    	__ for_:for_clause
    	where:(__ where_clause)? {
        return {
        	type: "compr_array_expr",
            for: for_,
            where: where,
            select: select
        };
    }
for_clause
	= "FOR"i __ name:identifier __ "IN"i __ array_expr:array_expr {
    	return {
        	name: name,
            array_expr: array_expr
        };
    }
binary_array_expr
	= "ARRAY_"i op:("CONCAT"i) "(" _ lha:array_expr _ "," _ rha:array_expr _ ")" {
    	return {
        	type: "binary_array_expr",
            op: op.toUpperCase(),
            lha: lha,
            rha: rha
        };
    }
set_array_expr
	= "SET_"i op:("UNION"i/"INTERSECT"i/"DIFFERENCE"i) "(" _ lha:array_expr _ "," _ rha:array_expr _ ")" {
    	return {
        	type: "set_array_expr",
            op: op.toUpperCase(),
            lha: lha,
            rha: rha
        };
    }
    
/*
 * expr
 */
expr 
	= add_expr
    / base_expr

add_expr
	= lhe:mul_expr tail:(_ op:('+'/'-') _ lhe:mul_expr { return { op:op, lhe:lhe }; })? {
    	if (!tail) {
        	return lhe;
        }
    	return {
        	type: "binary_expr",
            op: tail.op,
            lhe: lhe,
            rhe: tail.rhe
        };
    }

mul_expr
	= lhe:base_expr tail:(_ op:('*'/'/') _ lhe:base_expr { return { op:op, lhe:lhe }; })? {
    	if (!tail) {
        	return lhe;
        }
    	return {
        	type: "binary_expr",
            op: tail.op,
            lhe: lhe,
            rhe: tail.rhe
        };
    }

base_expr
	= red_expr
    / path
    / value
    / ("(" _ expr:expr _ ")") {
    	return expr;
    }

red_expr
	= "ARRAY_"i op:("SUM"i / "AVG"i / "MIN"i / "MAX"i / "COUNT"i) "(" _ array_expr:array_expr _ ")" {
      return {
          type: "red_expr",
          op: op.toUpperCase(),
          array_expr: array_expr
      };
  }

/*
 * TODO: types
 */
path
	= head:path_comp tail:('.' comp:path_comp { return comp; })* {
    	return {
        	type: 'path',
            comps: [head].concat(tail)
        };
    }
path_comp
	= name:identifier index:('[' (integer/'*') ']')? {
    	return {
        	name: name,
            index: index ? index[1] : null
        };
    }
    
identifier
	= [a-zA-Z][a-zA-Z0-9_]* {
		return text();
    }

value
	= string
    / integer
    / number
    / boolean
boolean
	= ('TRUE'i/'FALSE'i) {
    	return text().toUpperCase() === 'TRUE';
    }
string
	= ('"' text:[^"]* '"') {
    	return text.join("");
    }
    / ("'" text:[^']* "'") {
    	return text.join("");
    }
number
	= integer '.' [0-9]+ {
    	return parseFloat(text());
    }
integer
	= ('+'/'-')?[0-9]+ {
    	return parseInt(text(), 10);
    }

_	"optional_space"
	= space*
__	"space"
	= space+
space
	= [ \t\n\r]
