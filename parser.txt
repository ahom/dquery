// QUERY
Query
  = _ Operation (_ Operation)* _

// OPERATIONS
Operation
  = ReduceOp / MapOp / FilterOp / ConcatOp / LimitOp / SkipOp

ReduceOp
  = "REDUCE"i _ "KEYS"i _ ReduceOpKeysMapping _ "VALUES"i _ ReduceOpValuesMapping

ReduceOpKeysMapping
  = "{" _ KeyName _ ":" _ Expression (_ "," _ KeyName _ ":" _ Expression)* _ "}"

ReduceOpValuesMapping
  = "{" _ KeyName _ ":" _ ExprReducer (_ "," _ KeyName _ ":" _ ExprReducer)* _ "}"

MapOp
  = "MAP"i _ MapOpMapping

MapOpMapping
  = "{" _ KeyName _ ":" _ ( Expression / ArrayExpression ) (_ "," _ KeyName _ ":" _ ( Expression / ArrayExpression ))* _ "}"

ConcatOp
  = "CONCAT"i _ "[" _ Path (_ "," _ Path)* _ "]"

FilterOp
  = "FILTER"i _ Condition

SkipOp
  = "SKIP"i _ Integer
 
LimitOp
  = "LIMIT"i _ Integer

// REDUCERS
Reducer
  = ExprReducer

ExprReducer
  = ( "SUM"i / "AVG"i / "COUNT"i / "MIN"i / "MAX"i ) _ Expression

// CONDITIONS
Condition
  = OrCondition

OrCondition
  = AndCondition (_ "OR"i _ AndCondition)*

AndCondition
  = BaseCondition (_ "AND"i _ BaseCondition)*

BaseCondition
  = ExistsCondition / BinaryExprCondition / EachCondCondition / ListCondition / LikeCondition / "(" _ Condition _ ")"

EachCondCondition
  = ("ANY"i / "ALL"i) _ Path _ "MATCH"i _ BaseCondition

ListCondition
  = Path _ ( "IN"i / "NIN"i ) _ "[" _ Value (_ "," _ Value)* _ "]"

LikeCondition
  = Path _ "LIKE"i _ String
  
ExistsCondition
  = Path _ "EXISTS"i

BinaryExprCondition
  = Expression _ ( "<=" / "<" / ">=" / ">" / "!=" / "=" ) _ Expression
  
// ARRAYEXPR
ArrayExpression
  = "FOR"i _ "EACH"i _ Path (_ ( FilterOp / MapOp ) )*

// EXPRESSIONS
Expression
  = ReducedExpression / AddExpression 

ReducedExpression
  = ArrayExpression _ ExprReducer

AddExpression
  = MultExpression (_ ( "+" / "-" ) _ MultExpression)*
  
MultExpression
  = BaseExpression (_ ( "*" / "/" ) _ BaseExpression)*

BaseExpression
  = Value / Path / "("_ Expression _ ")"

Path
  = KeyName ("." KeyName)*

Value
  = String / Boolean / Number / Date / Timestamp

Timestamp
  = "TIMESTAMP"i _ "\"" [0-9-:]+ "\""

Date
  = "DATE"i _ "\"" [0-9-]+ "\""

Boolean
  = "TRUE"i / "FALSE"i

String
  = "\"" [^"]* "\""

Number
  = Integer / ("-"/"+")?[0-9]+("."[0-9]+)? { return parseFloat(text()); } 

Integer
  = [0-9]+ { return parseInt(text(), 10); }

KeyName
  = [a-zA-Z0-9_-]+
  
_ "whitespace"
  = [ \t\n\r]*
